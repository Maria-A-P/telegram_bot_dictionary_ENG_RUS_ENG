# lets print out the meaning of a response code:
# by 2022-06-26 from  http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml

def response_code_meaning(response_code):
    print("which, according to http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml as of date 2022-06-26, means:")
    if response_code == 100: return "Continue	[RFC9110, Section 15.2.1]"
    elif response_code == 	101	: return "Switching Protocols	[RFC9110, Section 15.2.2]"
    elif response_code == 	102	: return "Processing	[RFC2518]"
    elif response_code == 	103	: return "Early Hints	[RFC8297]"
    elif ((response_code >= 104) and (response_code <= 199)): return "Unassigned"
    elif response_code == 	200	: return "OK	[RFC9110, Section 15.3.1]"
    elif response_code == 	201	: return "Created	[RFC9110, Section 15.3.2]"
    elif response_code == 	202	: return "Accepted	[RFC9110, Section 15.3.3]"
    elif response_code == 	203	: return "Non-Authoritative Information	[RFC9110, Section 15.3.4]"
    elif response_code == 	204	: return "No Content	[RFC9110, Section 15.3.5]"
    elif response_code == 	205	: return "Reset Content	[RFC9110, Section 15.3.6]"
    elif response_code == 	206	: return "Partial Content	[RFC9110, Section 15.3.7]"
    elif response_code == 	207	: return "Multi-Status	[RFC4918]"
    elif response_code == 	208	: return "Already Reported	[RFC5842]"
    elif ((response_code >= 209) and (response_code <= 225)): return "Unassigned"
    elif response_code == 	226	: return "IM Used	[RFC3229]"
    elif ((response_code >= 227) and (response_code <= 299)): return "Unassigned"
    elif response_code == 	300	: return "Multiple Choices	[RFC9110, Section 15.4.1]"
    elif response_code == 	301	: return "Moved Permanently	[RFC9110, Section 15.4.2]"
    elif response_code == 	302	: return "Found	[RFC9110, Section 15.4.3]"
    elif response_code == 	303	: return "See Other	[RFC9110, Section 15.4.4]"
    elif response_code == 	304	: return "Not Modified	[RFC9110, Section 15.4.5]"
    elif response_code == 	305	: return "Use Proxy	[RFC9110, Section 15.4.6]"
    elif response_code == 	306	: return "(Unused)	[RFC9110, Section 15.4.7]"
    elif response_code == 	307	: return "Temporary Redirect	[RFC9110, Section 15.4.8]"
    elif response_code == 	308	: return "Permanent Redirect	[RFC9110, Section 15.4.9]"
    elif ((response_code >= 309) and (response_code <= 399)): return "Unassigned"
    elif response_code == 	400	: return "Bad Request	[RFC9110, Section 15.5.1]"
    elif response_code == 	401	: return "Unauthorized	[RFC9110, Section 15.5.2]"
    elif response_code == 	402	: return "Payment Required	[RFC9110, Section 15.5.3]"
    elif response_code == 	403	: return "Forbidden	[RFC9110, Section 15.5.4]"
    elif response_code == 	404	: return "Not Found	[RFC9110, Section 15.5.5]"
    elif response_code == 	405	: return "Method Not Allowed	[RFC9110, Section 15.5.6]"
    elif response_code == 	406	: return "Not Acceptable	[RFC9110, Section 15.5.7]"
    elif response_code == 	407	: return "Proxy Authentication Required	[RFC9110, Section 15.5.8]"
    elif response_code == 	408	: return "Request Timeout	[RFC9110, Section 15.5.9]"
    elif response_code == 	409	: return "Conflict	[RFC9110, Section 15.5.10]"
    elif response_code == 	410	: return "Gone	[RFC9110, Section 15.5.11]"
    elif response_code == 	411	: return "Length Required	[RFC9110, Section 15.5.12]"
    elif response_code == 	412	: return "Precondition Failed	[RFC9110, Section 15.5.13]"
    elif response_code == 	413	: return "Content Too Large	[RFC9110, Section 15.5.14]"
    elif response_code == 	414	: return "URI Too Long	[RFC9110, Section 15.5.15]"
    elif response_code == 	415	: return "Unsupported Media Type	[RFC9110, Section 15.5.16]"
    elif response_code == 	416	: return "Range Not Satisfiable	[RFC9110, Section 15.5.17]"
    elif response_code == 	417	: return "Expectation Failed	[RFC9110, Section 15.5.18]"
    elif response_code == 	418	: return "(Unused)	[RFC9110, Section 15.5.19]"
    elif ((response_code >= 419) and (response_code <= 420)): return "Unassigned"
    elif response_code == 	421	: return "Misdirected Request	[RFC9110, Section 15.5.20]"
    elif response_code == 	422	: return "Unprocessable Content	[RFC9110, Section 15.5.21]"
    elif response_code == 	423	: return "Locked	[RFC4918]"
    elif response_code == 	424	: return "Failed Dependency	[RFC4918]"
    elif response_code == 	425	: return "Too Early	[RFC8470]"
    elif response_code == 	426	: return "Upgrade Required	[RFC9110, Section 15.5.22]"
    elif response_code == 	427	: return "Unassigned"
    elif response_code == 	428	: return "Precondition Required	[RFC6585]"
    elif response_code == 	429	: return "Too Many Requests	[RFC6585]"
    elif response_code == 	430	: return "Unassigned"
    elif response_code == 	431	: return "Request Header Fields Too Large	[RFC6585]"
    elif ((response_code >= 432) and (response_code <= 450)): return "Unassigned"
    elif response_code == 	451	: return "Unavailable For Legal Reasons	[RFC7725]"
    elif ((response_code >= 452) and (response_code <= 499)): return "Unassigned"
    elif response_code == 	500	: return "Internal Server Error	[RFC9110, Section 15.6.1]"
    elif response_code == 	501	: return "Not Implemented	[RFC9110, Section 15.6.2]"
    elif response_code == 	502	: return "Bad Gateway	[RFC9110, Section 15.6.3]"
    elif response_code == 	503	: return "Service Unavailable	[RFC9110, Section 15.6.4]"
    elif response_code == 	504	: return "Gateway Timeout	[RFC9110, Section 15.6.5]"
    elif response_code == 	505	: return "HTTP Version Not Supported	[RFC9110, Section 15.6.6]"
    elif response_code == 	506	: return "Variant Also Negotiates	[RFC2295]"
    elif response_code == 	507	: return "Insufficient Storage	[RFC4918]"
    elif response_code == 	508	: return "Loop Detected	[RFC5842]"
    elif response_code == 	509	: return "Unassigned"
    elif response_code == 	510	: return "Not Extended (OBSOLETED)	[RFC2774][status-change-http-experiments-to-historic]"
    elif response_code == 	511	: return "Network Authentication Required	[RFC6585]"
    elif ((response_code >= 512) and (response_code <= 599)): return "Unassigned"
    else:  return "SORRY! No meaning for the code has been found in the above mentioned document"


